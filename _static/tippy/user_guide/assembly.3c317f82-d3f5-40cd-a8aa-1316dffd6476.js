selector_to_html = {"a[href=\"#save-with-trimming-and-overwrite-existing-files\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Save with Trimming and Overwrite Existing Files<a class=\"headerlink\" href=\"#save-with-trimming-and-overwrite-existing-files\" title=\"Link to this heading\">#</a></h4><p>To trim 4 pixels from each edge, overwrite existing files, and save:</p>", "a[href=\"#overview\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.1. </span>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Link to this heading\">#</a></h2><p>Before running motion-correction or segmentation, we need to de-interleave raw <code class=\"docutils literal notranslate\"><span class=\"pre\">.tiff</span></code> files.</p><p>This is done internally with the <a class=\"reference external\" href=\"https://github.com/atlab/scanreader\">scanreader</a>.</p>", "a[href=\"#scanreader\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.2. </span>scanreader<a class=\"headerlink\" href=\"#scanreader\" title=\"Link to this heading\">#</a></h2><p>The first thing you need to do is initialize a scan. This is done with <code class=\"docutils literal notranslate\"><span class=\"pre\">read_scan</span></code>.</p>", "a[href=\"../api/index.html#lbm_caiman_python.read_scan\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.read_scan\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">read_scan</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pathnames</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dtype=&lt;class</span> <span class=\"pre\">'numpy.int16'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">join_contiguous=False</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/lbm_caiman_python/lcp_io.html#read_scan\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Reads a ScanImage scan.</p></dd>", "a[href=\"#save-your-data\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.3. </span>Save your data<a class=\"headerlink\" href=\"#save-your-data\" title=\"Link to this heading\">#</a></h2><p>The scan object returned by <code class=\"docutils literal notranslate\"><span class=\"pre\">read_scan</span></code> can be fed into <a class=\"reference internal\" href=\"../api/index.html#lbm_caiman_python.save_as\" title=\"lbm_caiman_python.save_as\"><span class=\"xref myst py py-func\"><code class=\"docutils literal notranslate\"><span class=\"pre\">save_as</span></code></span></a> to save as a <code class=\"docutils literal notranslate\"><span class=\"pre\">.tiff</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">.zarr</span></code>.</p>", "a[href=\"../api/index.html#lbm_caiman_python.save_as\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.save_as\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">save_as</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">scan</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">savedir</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">PathLike</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">planes</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">frames</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metadata</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">overwrite</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">append_str</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ext</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'.tiff'</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/lbm_caiman_python/assembly.html#save_as\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Save scan data to the specified directory in the desired format.</p><p class=\"rubric\">Notes</p><p>This function creates the specified directory if it does not already exist.\nData is saved per channel, organized by planes.</p></dd>", "a[href=\"#save-all-planes-and-frames-as-tiff\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Save All Planes and Frames as TIFF<a class=\"headerlink\" href=\"#save-all-planes-and-frames-as-tiff\" title=\"Link to this heading\">#</a></h4><p>To save all planes and frames to a specified directory in TIFF format:</p>", "a[href=\"#save-each-roi-separately\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Save Each ROI Separately<a class=\"headerlink\" href=\"#save-each-roi-separately\" title=\"Link to this heading\">#</a></h4><p>To save each ROI in its own folder:</p>", "a[href=\"#examples\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.5.2. </span>Examples<a class=\"headerlink\" href=\"#examples\" title=\"Link to this heading\">#</a></h3><h4>Print Metadata<a class=\"headerlink\" href=\"#print-metadata\" title=\"Link to this heading\">#</a></h4><p>To print metadata for the TIFF files in a directory:</p>", "a[href=\"#notes\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.5.3. </span>Notes<a class=\"headerlink\" href=\"#notes\" title=\"Link to this heading\">#</a></h3>", "a[href=\"#save-specific-frames-and-planes-as-zarr\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Save Specific Frames and Planes as Zarr<a class=\"headerlink\" href=\"#save-specific-frames-and-planes-as-zarr\" title=\"Link to this heading\">#</a></h4><p>To save frames 10 to 50 and planes 1 to 5 in Zarr format:</p>", "a[href=\"#data-preview\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.4. </span>Data Preview<a class=\"headerlink\" href=\"#data-preview\" title=\"Link to this heading\">#</a></h2><p>To get a rough idea of the quality of your extracted timeseries, we can create a fastplotlib visualization to preview traces of individual pixels.</p><p>Here, we simply click on any pixel in the movie, and we get a 2D trace (or \u201ctemporal component\u201d as used in this field) of the pixel through the course of the movie:</p>", "a[href=\"#optional-arguments\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.5.1. </span>Optional Arguments<a class=\"headerlink\" href=\"#optional-arguments\" title=\"Link to this heading\">#</a></h3>", "a[href=\"#assembly-benchmarks\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.6. </span>Assembly Benchmarks<a class=\"headerlink\" href=\"#assembly-benchmarks\" title=\"Link to this heading\">#</a></h2><p>CPU: 13th Gen Intel(R) Core(TM) i9-13900KS   3.20 GHz\nRAM: 128 GB usable\nOS: Windows 10 Pro, 22H2</p>", "a[href=\"#print-metadata\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Print Metadata<a class=\"headerlink\" href=\"#print-metadata\" title=\"Link to this heading\">#</a></h4><p>To print metadata for the TIFF files in a directory:</p>", "a[href=\"#command-line-usage\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.5. </span>Command Line Usage<a class=\"headerlink\" href=\"#command-line-usage\" title=\"Link to this heading\">#</a></h2><h3><span class=\"section-number\">1.5.1. </span>Optional Arguments<a class=\"headerlink\" href=\"#optional-arguments\" title=\"Link to this heading\">#</a></h3>", "a[href=\"#image-assembly\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1. </span>Image Assembly<a class=\"headerlink\" href=\"#image-assembly\" title=\"Link to this heading\">#</a></h1><h2><span class=\"section-number\">1.1. </span>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Link to this heading\">#</a></h2><p>Before running motion-correction or segmentation, we need to de-interleave raw <code class=\"docutils literal notranslate\"><span class=\"pre\">.tiff</span></code> files.</p><p>This is done internally with the <a class=\"reference external\" href=\"https://github.com/atlab/scanreader\">scanreader</a>.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
