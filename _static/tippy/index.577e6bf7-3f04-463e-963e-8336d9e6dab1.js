selector_to_html = {"a[href=\"api/index.html#lbm_caiman_python.params_from_metadata\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.params_from_metadata\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">params_from_metadata</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metadata</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/default_ops.html#params_from_metadata\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Generate parameters for CNMF from metadata.</p><p>Based on the pixel resolution and frame rate, the parameters are set to reasonable values.</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.get_noise_fft\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.get_noise_fft\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_noise_fft</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Y</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">noise_range</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">noise_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'logmexp'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_num_samples_fft</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">3072</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/util/quality.html#get_noise_fft\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Compute the noise level in the Fourier domain for a given signal.</p></dd>", "a[href=\"user_guide/assembly.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1. </span>Image Assembly<a class=\"headerlink\" href=\"#image-assembly\" title=\"Link to this heading\">#</a></h1><h2><span class=\"section-number\">1.1. </span>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Link to this heading\">#</a></h2><p>Before running motion-correction or segmentation, we need to de-interleave raw <code class=\"docutils literal notranslate\"><span class=\"pre\">.tiff</span></code> files.</p><p>This is done internally with the <a class=\"reference external\" href=\"https://github.com/atlab/scanreader\">scanreader</a>.</p>", "a[href=\"#lbm-caiman-python-documentation\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">LBM-CaImAn-Python Documentation<a class=\"headerlink\" href=\"#lbm-caiman-python-documentation\" title=\"Link to this heading\">#</a></h1><p>For the <code class=\"docutils literal notranslate\"><span class=\"pre\">MATLAB</span></code> implementation of this pipeline, see <a class=\"reference external\" href=\"https://github.com/MillerBrainObservatory/LBM-CaImAn-MATLAB/\">here</a>.</p><p>For current installation instructions and requirements, see the project <a class=\"reference external\" href=\"https://github.com/MillerBrainObservatory/LBM-CaImAn-Python/blob/master/README.md\">README</a>.</p>", "a[href=\"api/index.html#lbm_caiman_python.get_single_patch_coords\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.get_single_patch_coords\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_single_patch_coords</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dims</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">stride</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">overlap</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">patch_index</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/helpers.html#get_single_patch_coords\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Get coordinates of a single patch based on stride, overlap parameters of motion-correction.</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.save_as\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.save_as\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">save_as</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">scan</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">savedir</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">PathLike</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">planes</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">frames</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metadata</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">overwrite</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">append_str</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ext</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'.tiff'</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/assembly.html#save_as\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Save scan data to the specified directory in the desired format.</p><p class=\"rubric\">Notes</p><p>This function creates the specified directory if it does not already exist.\nData is saved per channel, organized by planes.</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.get_metadata\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.get_metadata\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_metadata</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">file</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">PathLike</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">|</span></span><span class=\"w\"> </span><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/lcp_io.html#get_metadata\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Extract metadata from a TIFF file. This can be a raw ScanImage TIFF or one\nprocessed via [lbm_caiman_python.save_as()](#save_as).</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.drop_duplicates\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.drop_duplicates\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">drop_duplicates</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">df</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/batch.html#drop_duplicates\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Remove duplicate items from a batch DataFrame.</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.default_params\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.default_params\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">default_params</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/default_ops.html#default_params\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Default parameters for both registration and CNMF.\nThe exception is gSiz being set relative to gSig.</p><p class=\"rubric\">Notes</p><p>This will likely change as CaImAn is updated.</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.return_scan_offset\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.return_scan_offset\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">return_scan_offset</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image_in</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nvals</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">8</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/assembly.html#return_scan_offset\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Compute the scan offset correction between interleaved lines or columns in an image.</p><p>This function calculates the scan offset correction by analyzing the cross-correlation\nbetween interleaved lines or columns of the input image. The cross-correlation peak\ndetermines the amount of offset between the lines or columns, which is then used to\ncorrect for any misalignment in the imaging process.</p><p class=\"rubric\">Notes</p><p>This function assumes that the input image contains interleaved lines or columns that\nneed to be analyzed for misalignment. The cross-correlation method is sensitive to\nthe similarity in pattern between the interleaved lines or columns. Hence, a strong\nand clear peak in the cross-correlation result indicates a good alignment, and the\ncorresponding lag value indicates the amount of misalignment.</p><p class=\"rubric\">Examples</p></dd>", "a[href=\"examples/notebooks/motion_correction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">3. </span>Registration<a class=\"headerlink\" href=\"#registration\" title=\"Link to this heading\">#</a></h1><p>Correct for rigid/non-rigid movement</p>", "a[href=\"#how-to\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">How to<a class=\"headerlink\" href=\"#how-to\" title=\"Link to this heading\">#</a></h2><p>The recommended way to use this pipeline is by using the <a class=\"reference external\" href=\"https://github.com/MillerBrainObservatory/LBM-CaImAn-Python/tree/master/demos/notebooks\">example notebooks</a>\nwhile having the user guide accessible as well. The notebooks act as a walkthrough tutorial that you can change to fit your dataset as you go. Fully rendered versions of the notebooks\nare available in the <a class=\"reference external\" href=\"https://millerbrainobservatory.github.io/LBM-CaImAn-Python/examples/index.html\">tutorial section of this documentation</a>.</p>", "a[href=\"#documentation-contents\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Documentation Contents<a class=\"headerlink\" href=\"#documentation-contents\" title=\"Link to this heading\">#</a></h2>", "a[href=\"api/index.html#lbm_caiman_python.get_files_ext\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.get_files_ext\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_files_ext</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">base_dir</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">str_contains</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_depth</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">list</span></span></span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/lcp_io.html#get_files_ext\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Recursively searches for files with a specific extension up to a given depth and stores their paths in a pickle file.</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.concat_param_diffs\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.concat_param_diffs\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">concat_param_diffs</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">input_df</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">param_diffs</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/summary.html#concat_param_diffs\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Add parameter differences to the input DataFrame.</p><p class=\"rubric\">Examples</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.get_summary_batch\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.get_summary_batch\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_summary_batch</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">df</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">DataFrame</span></span></span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/summary.html#get_summary_batch\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Create a summary of successful and unsuccessful runs for each completed algorithm.</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.vectorize\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.vectorize\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">vectorize</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">movie</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pixel_indices</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">ndarray</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'C'</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/util/transform.html#vectorize\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Reshape an array: [time, df, cols] -&gt; [n_pixels, time]</p></dd>", "a[href=\"#hpc\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">HPC<a class=\"headerlink\" href=\"#hpc\" title=\"Link to this heading\">#</a></h2><p>Slurm utilities are available in the <a class=\"reference external\" href=\"https://github.com/MillerBrainObservatory/utilities/tree/master/slurm\">utilities repository</a>.</p><p><strong>Installation</strong></p>", "a[href=\"api/index.html#lbm_caiman_python.combine_z_planes\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.combine_z_planes\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">combine_z_planes</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">results</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">dict</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/collation.html#combine_z_planes\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Combines all z-planes in the results dictionary into a single estimates object.</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.delete_batch_rows\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.delete_batch_rows\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">delete_batch_rows</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">df</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rows_delete</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">remove_data</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">safe_removal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/batch.html#delete_batch_rows\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd></dd>", "a[href=\"user_guide/batch_utilities.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">2. </span>Batch-Utilities<a class=\"headerlink\" href=\"#batch-utilities\" title=\"Link to this heading\">#</a></h1><p>Before continuing, users should review the <a class=\"reference external\" href=\"https://mesmerize-core.readthedocs.io/en/latest/user_guide.html\">mesmerize-core user guide</a>.</p>", "a[href=\"examples/notebooks/batch_helpers.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">2. </span>Batch Helpers<a class=\"headerlink\" href=\"#batch-helpers\" title=\"Link to this heading\">#</a></h1><p>A notebook to help manage batch results</p>", "a[href=\"api/index.html#lbm_caiman_python.clean_batch\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.clean_batch\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">clean_batch</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">df</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/batch.html#clean_batch\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Clean a batch of DataFrame entries by removing unsuccessful df from storage.</p><p>This function iterates over the df of the given DataFrame, identifies\ndf where the \u2018outputs\u2019 column is either <cite>None</cite> or a dictionary containing\na \u2018success\u2019 key with a <cite>False</cite> value. For each such row, the corresponding\nitem is removed using the <cite>df.caiman.remove_item()</cite> method, and the removal\nis saved to disk.</p><p class=\"rubric\">Notes</p><p class=\"rubric\">Examples</p></dd>", "a[href=\"examples/notebooks/assembly.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1. </span>Image Assembly<a class=\"headerlink\" href=\"#image-assembly\" title=\"Link to this heading\">#</a></h1><p>Raw ScanImage <code class=\"docutils literal notranslate\"><span class=\"pre\">.tiff</span></code> files are saved to disk in an interleaved manner. The general workflow is as follows:</p>", "a[href=\"api/index.html#lbm_caiman_python.unvectorize\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.unvectorize\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">unvectorize</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Y</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">shape</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">tuple</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">int</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">int</span><span class=\"p\"><span class=\"pre\">]</span></span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pixel_indices</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">ndarray</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'C'</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/util/transform.html#unvectorize\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Reshape an array: [n_pixels, time] -&gt; [time, df, cols]\nor\n[n_pixels,] -&gt; [df, cols]</p></dd>", "a[href=\"user_guide/segmentation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">4. </span>Segmentation<a class=\"headerlink\" href=\"#segmentation\" title=\"Link to this heading\">#</a></h1><h2><span class=\"section-number\">4.1. </span>CNMF Parameters<a class=\"headerlink\" href=\"#cnmf-parameters\" title=\"Link to this heading\">#</a></h2><p id=\"decay-times\"><a class=\"reference external\" href=\"https://www.janelia.org/jgcamp8-calcium-indicators\">Decay times</a></p>", "a[href=\"#pipeline-overview\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pipeline Overview<a class=\"headerlink\" href=\"#pipeline-overview\" title=\"Link to this heading\">#</a></h2><p>LBM-CaImAn-Pipeline uses <a class=\"reference external\" href=\"https://github.com/nel-lab/mesmerize-core/tree/master\">mesmerize-core</a> to interface with <a class=\"reference external\" href=\"https://github.com/flatironinstitute/CaImAn\">CaImAn</a> algorithms for Calcium Imaging data processing.</p><p>There are 4 steps in this pipeline:</p>", "a[href=\"#transfering-posix-windows\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Transfering POSIX-&gt;Windows<a class=\"headerlink\" href=\"#transfering-posix-windows\" title=\"Link to this heading\">#</a></h3><p>You can move your batch contents anywhere. However, if moving them to a different operating system, you may encounter\nthe followng error:</p>", "a[href=\"api/index.html#lbm_caiman_python.get_summary_mcorr\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.get_summary_mcorr\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_summary_mcorr</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">df</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">DataFrame</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">DataFrame</span></span></span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/summary.html#get_summary_mcorr\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd></dd>", "a[href=\"api/index.html#lbm_caiman_python.get_all_batch_items\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.get_all_batch_items\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_all_batch_items</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">files</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">list</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">algo</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'all'</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">DataFrame</span></span></span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/summary.html#get_all_batch_items\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Load all cnmf items from a list of .pickle files.</p></dd>", "a[href=\"user_guide/registration.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">3. </span>Registration<a class=\"headerlink\" href=\"#registration\" title=\"Link to this heading\">#</a></h1><h2><span class=\"section-number\">3.1. </span>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Link to this heading\">#</a></h2><p>We use <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Image_registration\">image registration</a> to make sure that our neuron in the first frame is in the same spatial location as in frame N throughout the time-series.</p><p>As described in the <a class=\"reference internal\" href=\"user_guide/batch_utilities.html#batch\"><span class=\"std std-ref\">Batch-Utilities</span></a>, registration can be run on your data by adding an <code class=\"docutils literal notranslate\"><span class=\"pre\">mcorr</span></code> item to the batch with parameters:</p>", "a[href=\"api/index.html#lbm_caiman_python.generate_patch_view\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.generate_patch_view\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">generate_patch_view</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Any</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pixel_resolution</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">target_patch_size</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">40</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">overlap_fraction</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">0.5</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/helpers.html#generate_patch_view\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Generate a patch visualization for a 2D image with approximately square patches of a specified size in microns.\nPatches are evenly distributed across the image, using calculated strides and overlaps.</p><p class=\"rubric\">Examples</p></dd>", "a[href=\"user_guide/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">User Guide<a class=\"headerlink\" href=\"#user-guide\" title=\"Link to this heading\">#</a></h1><p>This section covers each step in the pipeline, parameters and metadata in more detail.</p>", "a[href=\"api/index.html#lbm_caiman_python.calculate_centers\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.calculate_centers\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">calculate_centers</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">A</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dims</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/util/transform.html#calculate_centers\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd></dd>", "a[href=\"api/index.html#lbm_caiman_python.get_batch_from_path\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.get_batch_from_path\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_batch_from_path</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">batch_path</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/batch.html#get_batch_from_path\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Load or create a batch at the given batch_path.</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.read_scan\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.read_scan\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">read_scan</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pathnames</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dtype=&lt;class</span> <span class=\"pre\">'numpy.int16'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">join_contiguous=False</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/lcp_io.html#read_scan\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Reads a ScanImage scan.</p></dd>", "a[href=\"examples/notebooks/collation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">5. </span>Collate Planes<a class=\"headerlink\" href=\"#collate-planes\" title=\"Link to this heading\">#</a></h1><p>In this notebook, we merge CNMF results across each of our z-planes.</p>", "a[href=\"#helpful-resources\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Helpful Resources<a class=\"headerlink\" href=\"#helpful-resources\" title=\"Link to this heading\">#</a></h2>", "a[href=\"api/index.html#lbm_caiman_python.greedyROI\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.greedyROI\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">greedyROI</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Y</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">30</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gSig</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">[5,</span> <span class=\"pre\">5]</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gSiz</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">[11,</span> <span class=\"pre\">11]</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nIter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">5</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">kernel</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nb</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rolling_sum</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rolling_length</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">100</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">seed_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'auto'</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/util/quality.html#greedyROI\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Greedy initialization of spatial and temporal components using spatial Gaussian filtering</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.calculate_num_patches\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.calculate_num_patches\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">calculate_num_patches</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">stride</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">overlap</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/helpers.html#calculate_num_patches\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Calculate the total number of patches in an image given stride and rf.</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.load_batch\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.load_batch\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">load_batch</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">batch_path</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">str</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">|</span></span><span class=\"w\"> </span><span class=\"pre\">Path</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/batch.html#load_batch\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Load a batch after transfering it from a Windows to a POSIX system or vice versa.</p></dd>", "a[href=\"api/index.html#lbm_caiman_python.fix_scan_phase\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.fix_scan_phase\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">fix_scan_phase</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data_in</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">ndarray</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">offset</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">int</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/assembly.html#fix_scan_phase\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Corrects the scan phase of the data based on a given offset along a specified dimension.</p></dd>", "a[href=\"#performance\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Performance<a class=\"headerlink\" href=\"#performance\" title=\"Link to this heading\">#</a></h3><p>The primary pitfal of <a class=\"reference external\" href=\"https://github.com/MillerBrainObservatory/LBM-CaImAn-MATLAB/\">LBM-CaImAn-MATLAB</a> are the memory constraints. Though MATLAB is extremely efficient with threaded internal functions, the lack of 3rd-party library support means reading and writing to well-established file-formats (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">.tiff</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">.hdf5</span></code>) lacking modern features like <a class=\"reference external\" href=\"https://www.imperva.com/learn/performance/lazy-loading/\">lazy-loading data</a>. As a result, the memory footprint required to process a <em>N-GB dataset</em> will be <em>N-GB of memory</em>.</p><p>This pipeline utilizes the well-tested and optimized <a class=\"reference external\" href=\"https://pypi.org/project/tifffile/\">tifffile</a> to selectively load data only when it is needed. That is why processing a <code class=\"docutils literal notranslate\"><span class=\"pre\">35</span> <span class=\"pre\">GB</span></code> file will only consume ~<code class=\"docutils literal notranslate\"><span class=\"pre\">5</span> <span class=\"pre\">GB</span></code> of memory.</p>", "a[href=\"examples/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Tutorial<a class=\"headerlink\" href=\"#tutorial\" title=\"Link to this heading\">#</a></h1><p>Below are <a class=\"reference external\" href=\"https://github.com/MillerBrainObservatory/LBM-CaImAn-Python/tree/master/demos/notebooks\">example notebooks</a> that will walk you through the full processing pipeline.</p><p>To download these notebooks:</p>", "a[href=\"#usage\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Usage<a class=\"headerlink\" href=\"#usage\" title=\"Link to this heading\">#</a></h3><p>Beyond the obviously different programming language (MATLAB -&gt; Python), there are a few differences in how these pipelines were constructed.</p><p>The MATLAB implementation was essentially 4 functions spread across 4 <code class=\"docutils literal notranslate\"><span class=\"pre\">.m</span></code> files. These functions would be called from a user-made script (for example, <a class=\"reference external\" href=\"https://github.com/MillerBrainObservatory/LBM-CaImAn-MATLAB/blob/master/demo_LBM_pipeline.m\">demo_LBM_pipeline.m</a>).</p>", "a[href=\"glossary.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Glossary<a class=\"headerlink\" href=\"#glossary\" title=\"Link to this heading\">#</a></h1>", "a[href=\"examples/notebooks/segmentation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">4. </span>Segmentation<a class=\"headerlink\" href=\"#segmentation\" title=\"Link to this heading\">#</a></h1><p>Extract neuronal locations and planar time-traces.</p>", "a[href=\"#multi-file-batch-sbatch\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">multi_file_batch.sbatch</span></code><a class=\"headerlink\" href=\"#multi-file-batch-sbatch\" title=\"Link to this heading\">#</a></h3><p>Login to the hpc on the rocky-9 login node:</p>", "a[href=\"user_guide/collation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">5. </span>Collation<a class=\"headerlink\" href=\"#collation\" title=\"Link to this heading\">#</a></h1><p>Placeholder (see the notebook)</p>", "a[href=\"api/index.html#lbm_caiman_python.get_summary_cnmf\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.get_summary_cnmf\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_summary_cnmf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">df</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">DataFrame</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">DataFrame</span></span></span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/summary.html#get_summary_cnmf\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Get a summary of CNMF runs from a DataFrame.</p></dd>", "a[href=\"#comparison-with-lbm-caiman-matlab\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Comparison with <a class=\"reference external\" href=\"https://github.com/MillerBrainObservatory/LBM-CaImAn-MATLAB/\">LBM-CaImAn-MATLAB</a><a class=\"headerlink\" href=\"#comparison-with-lbm-caiman-matlab\" title=\"Link to this heading\">#</a></h2><h3>Usage<a class=\"headerlink\" href=\"#usage\" title=\"Link to this heading\">#</a></h3><p>Beyond the obviously different programming language (MATLAB -&gt; Python), there are a few differences in how these pipelines were constructed.</p><p>The MATLAB implementation was essentially 4 functions spread across 4 <code class=\"docutils literal notranslate\"><span class=\"pre\">.m</span></code> files. These functions would be called from a user-made script (for example, <a class=\"reference external\" href=\"https://github.com/MillerBrainObservatory/LBM-CaImAn-MATLAB/blob/master/demo_LBM_pipeline.m\">demo_LBM_pipeline.m</a>).</p>", "a[href=\"api/index.html#lbm_caiman_python.stack_from_files\"]": "<dt class=\"sig sig-object py\" id=\"lbm_caiman_python.stack_from_files\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">lbm_caiman_python.</span></span><span class=\"sig-name descname\"><span class=\"pre\">stack_from_files</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">files</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">list</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/lbm_caiman_python/lcp_io.html#stack_from_files\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Stacks a list of TIFF files into a Dask array. Can be 3D Tyx or 4D Tzyx.</p></dd>", "a[href=\"api/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">API<a class=\"headerlink\" href=\"#module-lbm_caiman_python\" title=\"Link to this heading\">#</a></h1>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
